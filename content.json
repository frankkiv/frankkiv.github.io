{"meta":{"title":"健忘 x 工程師","subtitle":null,"description":null,"author":"Frank","url":"http://yoursite.com"},"pages":[{"title":"Tags","date":"2017-06-03T03:33:45.000Z","updated":"2017-06-03T03:33:32.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2017-06-06T03:34:08.000Z","updated":"2017-06-03T05:07:51.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"TestTesttest"},{"title":"Categories","date":"2017-06-03T03:32:44.000Z","updated":"2017-06-03T03:32:45.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"MongoDB High Availability on AWS","slug":"Mongodb-HA","date":"2017-06-04T03:12:03.000Z","updated":"2017-06-06T10:20:14.000Z","comments":true,"path":"2017/06/04/Mongodb-HA/","link":"","permalink":"http://yoursite.com/2017/06/04/Mongodb-HA/","excerpt":"MongoDB-HAArchitecture1234567891011121314digraph hierarchy &#123; nodesep= 0.15 node [color=black,fontname=Arial,shape=box] edge [color=black] &quot;外部連線&quot; -&gt; &quot;Linux Bastion (Loopback)&quot; &quot;Linux Bastion (Loopback)&quot; -&gt; &#123;&quot;Primary&quot;&#125; [label=&quot; write data&quot;] &quot;Linux Bastion (Loopback)&quot; -&gt; &#123;&quot;Secondary node0&quot;&#125; [label=&quot; read data&quot;] subgraph cluster_mongo&#123; label = &quot;MONGO - HA&quot; Primary -&gt; &quot;Secondary node0&quot; [label=replication] Primary -&gt; &quot;Secondary node1&quot; [] &#125;&#125; 建置MogoDB Relica Set，database彼此透過hearbeating確認存活，並且Secondary定期去同步Primary的寫入資料 (根據oplog)。 Linux Bastion為入口，在Primary上進行資料寫入，在Secondary上進行資料讀取。","text":"MongoDB-HAArchitecture1234567891011121314digraph hierarchy &#123; nodesep= 0.15 node [color=black,fontname=Arial,shape=box] edge [color=black] &quot;外部連線&quot; -&gt; &quot;Linux Bastion (Loopback)&quot; &quot;Linux Bastion (Loopback)&quot; -&gt; &#123;&quot;Primary&quot;&#125; [label=&quot; write data&quot;] &quot;Linux Bastion (Loopback)&quot; -&gt; &#123;&quot;Secondary node0&quot;&#125; [label=&quot; read data&quot;] subgraph cluster_mongo&#123; label = &quot;MONGO - HA&quot; Primary -&gt; &quot;Secondary node0&quot; [label=replication] Primary -&gt; &quot;Secondary node1&quot; [] &#125;&#125; 建置MogoDB Relica Set，database彼此透過hearbeating確認存活，並且Secondary定期去同步Primary的寫入資料 (根據oplog)。 Linux Bastion為入口，在Primary上進行資料寫入，在Secondary上進行資料讀取。 Deployment Mongo-HA on AWS1. 建置教學這篇 教學文章 說明了如何在AWS伺服器上建置mongoDB-HA，其中 紅色部分(Requires input) 需要額外手動填寫，其他就直接使用原本給定的預設值即可。 Virtual Private Cloud: VPC就是一個虛擬的區域網路，如果你打算讓其他Instance可以在區網內直接讀寫資料庫的資料，你就必須要選擇在同一個VPC。 你也可以選擇開新的VPC，其他Instance可以利用Linux Bastion的入口來介接資料。 MongoDB Database Configuration: ClusterReplicaSetCount -&gt; 1 or 3 (only primary/ mongo-ha)，所以這邊我們要選擇3。 MongoDBAdminPassword -&gt; mongo auth password, default username is “admin”。 2. 建置完成進入AWS主控面板選到 Runing Instances，如果剛剛的配置都正確，此時可以看到建立的四個Instances (LinuxBastion, Mongo-Primary, Mongo-Secondary0, Mongo-Secondary1) 。 3. 如何使用從外部透過ssh連線到Linux Bastion，再連線到Relica-Set其中的機台上。透過下列指令我們可以看到Relica-Set的當前狀態。12345mongouse admindb.auth(&quot;admin&quot;, &quot;YourAdminPassword&quot;)rs.printReplicationInfo()rs.status() rs.status()的運行結果如下: uptime: 開機運行時間 optimeDate: 最後一次同步資料庫的時間點 the Date of the last operation applied to this member of the replica set from the oplog. lastHeartbeatRecv: 最後一次keepalive的時間點 electionDate: 被推選為Primary的時間點 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&#123; \"_id\" : 1, \"name\" : \"10.0.56.121:27017\", \"health\" : 1, \"state\" : 2, \"stateStr\" : \"SECONDARY\", \"uptime\" : 87039, \"optime\" : &#123; \"ts\" : Timestamp(1495608510, 3668), \"t\" : NumberLong(4) &#125;, \"optimeDate\" : ISODate(\"2017-05-24T06:48:30Z\"), \"syncingTo\" : \"10.0.60.34:27017\", \"configVersion\" : 1, \"self\" : true&#125;,&#123; \"_id\" : 2, \"name\" : \"10.0.60.34:27017\", \"health\" : 1, \"state\" : 2, \"stateStr\" : \"SECONDARY\", \"uptime\" : 87038, \"optime\" : &#123; \"ts\" : Timestamp(1495608510, 3668), \"t\" : NumberLong(4) &#125;, \"optimeDate\" : ISODate(\"2017-05-24T06:48:30Z\"), \"lastHeartbeat\" : ISODate(\"2017-05-25T02:23:57.291Z\"), \"lastHeartbeatRecv\" : ISODate(\"2017-05-25T02:23:57.297Z\"), \"pingMs\" : NumberLong(0), \"syncingTo\" : \"10.0.24.228:27017\", \"configVersion\" : 1&#125;,&#123; \"_id\" : 3, \"name\" : \"10.0.24.228:27017\", \"health\" : 1, \"state\" : 1, \"stateStr\" : \"PRIMARY\", \"uptime\" : 87038, \"optime\" : &#123; \"ts\" : Timestamp(1495608510, 3668), \"t\" : NumberLong(4) &#125;, \"optimeDate\" : ISODate(\"2017-05-24T06:48:30Z\"), \"lastHeartbeat\" : ISODate(\"2017-05-25T02:23:57.302Z\"), \"lastHeartbeatRecv\" : ISODate(\"2017-05-25T02:23:57.296Z\"), \"pingMs\" : NumberLong(2), \"electionTime\" : Timestamp(1495592021, 1), \"electionDate\" : ISODate(\"2017-05-24T02:13:41Z\"), \"configVersion\" : 1&#125; 使用者權限開通:use admin 和 db.getUsers() 我們可以看到在admin的資料庫裡面已經有了admin這個使用者。現在我們也要在其他資料庫建立對應的使用者。1234567891011show dbsuse dbname #database name#在當前資料庫建立使用者db.createUser( &#123; user:\"admin\", pwd:\"YourPass\", roles: [ \"readWrite\", &#123; role:\"root\", db:\"admin\" &#125; ]&#125;) 如何連線到 Relica-set:1234#URI format for Single-node plan:mongodb://dbuser:dbpass@host:port/dbname#URI format for Cluster plan:mongodb://dbuser:dbpass@host1:port1,host2:port2/dbname 這邊可以注意一下，在連線到Relica-Set的同時，可以針對讀寫的機制做一些設定。 Write Concern for Replica Sets Read Preference 12# 我們可以將上面cluster連線的指令修改如下mongodb://host.example.com/?readPreference=secondary&amp;maxStalenessSeconds=120 Loopback mongoDB connector:Edit server/datasources.json to set the MongoDB configs:123456789101112131415161718192021&#123; ... # previous \"db\": &#123; \"host\": \"172.19.76.46\", \"port\": 27017, \"url\": \"\", \"database\": \"BIRDY2MASTER\", \"password\": \"\", \"name\": \"db\", \"user\": \"\", \"connector\": \"mongodb\" &#125;, # for cluster \"db\": &#123; \"defaultForType\": \"mongodb\", \"connector\": \"loopback-connector-mongodb\", # change to cluster plan \"url\": \"mongodb://admin:YourPass@10.0.24.228:27017/BIRDY2MASTER\" &#125;&#125; 實際運行結果1. MongoDB-HA 當 Primary 掛掉的情形 測試內容(A: PRIMARY, B: SECONDARY, C: SECONDARY): 將A:PRIMARY關閉服務，從B看到rs.staut()原本A的lastHeartbeatMessage 顯示 Connection refused。 B和C投票表決，投票結果B上位變成新的PRIMARY，此時A的lastHeartbeatMessage 顯示Couldn’t get a connection within the time limit。 A開機後重新連線上，此時stateStr角色轉變成SECONDARY。 接下來會有幾秒鐘的時間，ABC都處於SECONDARY，估計是在投票選擇主從。 投票結果，A重新被選為PRIMARY。 2. ReadPreferenceDebug Command: mongotop, mongostat1234# 透過下面指令確認MongoDB當前讀寫狀態mongotop --host 10.0.24.228:27017 --username admin --password Qwer5632 --authenticationDatabase BIRDY2MASTERmongostat --host 10.0.56.121 -port 27017 --username admin --password Qwer5632 --authenticationDatabase BIRDY2MASTER 測試內容 當ReadPreference不做任何設定時，預設值為Primary，所有的 讀寫都會在Primary上進行。 當ReadPreference=secondary，在進行＊ 資料讀取時只會在Secondary上進行。若是將其中一台Secondary關閉，資料讀取會切換到另外一台還存活的Secondary上。","categories":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://yoursite.com/categories/MongoDB/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"},{"name":"mongodb-ha","slug":"mongodb-ha","permalink":"http://yoursite.com/tags/mongodb-ha/"},{"name":"replica-set","slug":"replica-set","permalink":"http://yoursite.com/tags/replica-set/"}]},{"title":"用 Hexo 建立你自己的部落格","slug":"Build-Your-Own-Blog","date":"2017-06-03T15:12:03.000Z","updated":"2017-06-03T16:06:25.000Z","comments":true,"path":"2017/06/03/Build-Your-Own-Blog/","link":"","permalink":"http://yoursite.com/2017/06/03/Build-Your-Own-Blog/","excerpt":"HEXO 是一個快速、簡單且強大的網誌框架(based on Nodejs)。Hexo 使用 Markdown（或其他渲染引擎）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。","text":"HEXO 是一個快速、簡單且強大的網誌框架(based on Nodejs)。Hexo 使用 Markdown（或其他渲染引擎）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。 在開始安裝 Hexo 先確認是否有安裝 NodeJs 和 Git 的套件。 安裝 Nodejshttps://nodejs.org/en/至官網下載，版本我選的是v6.10.3 安裝 Git如果使用mac作業系統可以到下面網頁去下載https://git-scm.com/download/mac或是使用 homebrew 安裝 git1234# 安裝homebrew/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"# 安裝gitbrew install git. 安裝 Hexohttps://hexo.io/zh-tw/12345678# 安裝hexo指令npm install hexo-cli -g# 建立部落格hexo init blogcd blognpm install# 在本機port 4000上建立一個http serverhexo server 套用主題https://hexo.io/themes/我使用的主題是這一個 Installation: 1git clone https://github.com/iTimeTraveler/hexo-theme-hipaper.git themes/hipaper Enable Theme:Modify theme setting in blog/_config.yml to hipaper(theme name). 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hipaper DISQUShttps://disqus.com/申請註冊帳號 Modify disqus setting in blog/themes/hipaper/_comfig.yml123# comment ShortName, you can choose only ONE to display.duoshuo_shortname:disqus_shortname: #填入你的註冊ID","categories":[{"name":"Blog","slug":"Blog","permalink":"http://yoursite.com/categories/Blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"disqus","slug":"disqus","permalink":"http://yoursite.com/tags/disqus/"}]}]}